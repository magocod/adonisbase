const CronJob = require('cron').CronJob;
const { ioc } = require("@adonisjs/fold");
const { hooks } = require("@adonisjs/ignitor");

/**
 * [summaryPublications description]
 *
 * - log info
 * interface infoReport {
 * 	 quantity_to_send: number; // total emails to send
 * 	 amount_sent: number; // emails sended
 * 	 status: number; // code status
 * }
 *
 * - log error
 * interface errorReport {
 * 	 error: string; // details error (custom)
 * 	 error_message: string; // error.message (property)
 * }
 *
 * @param  {[type]} User              [description]
 * @param  {[type]} EmailNotification [description]
 * @param  {[type]} Logger            [description]
 * @param  {[type]} Mail              [description]
 * @param  {[type]} EnvData           [description]
 * @return {[type]}                   [description]
 */
async function summaryPublications(User, EmailNotification, Logger, Mail, EnvData) {
	try {
	  console.log('init: job send emails');

	  const infoReport = {
			quantity_to_send: 0,
			amount_sent: 0,
			status: EmailNotification.status.COMPLETED
		};

		const count = await User.getCount()
		// console.log(count)
		infoReport.quantity_to_send = count

		const users = await User.query().fetch()
		for (const userData of users.toJSON()) {
			try {
				await Mail.send(
					'emails.summarypublications',
					{
						user: userData,
						app: EnvData
					},
					(message) => {
		      message
		        .to(userData.email)
		        .from('noreply@mailtrap.io')
		        .subject('Summary publications, ' + EnvData.APP_NAME)
		    	}
		    )
		    infoReport.amount_sent++
				console.log('email successfully sent to', userData.email)
			} catch(error) {
				const errorReport = {
					error: 'email failed to send' + userData.email,
					error_message: error.message,
				}
				console.log(errorReport.error)
				Logger.info(
					'enr_' + EmailNotification.status.CRITICAL_ERROR + '_' + new Date().getTime(),
					{ report: errorReport }
				)
			}
		}

		if (infoReport.quantity_to_send !== infoReport.amount_sent) {
			infoReport.status = EmailNotification.status.SUCCESS
		}

		// console.log(usersEmails)
		console.log('end: job send emails, completed');
		Logger.info('enr_' + infoReport.status + '_' + new Date().getTime(),
			{ report: infoReport }
		)
	} catch (error) {
		console.log(error.message)
		console.log('end: job send emails, critical error');
		const errorReport = {
			error: 'error function send emails',
			error_message: error.message,
		}
		Logger.error(
			'enr_' + EmailNotification.status.CRITICAL_ERROR + '_' + new Date().getTime(),
			{ report: errorReport }
		)
	}
}


hooks.after.httpServer(() => {

	const Env = ioc.use('Env');
	const Logger = ioc.use('Logger')
	const EmailNotification = ioc.use('App/Models/EmailNotification')

	const ACTIVATE_SCHEDULED_TASKS = JSON.parse(Env.get('ACTIVATE_SCHEDULED_TASKS'));

	if (!ACTIVATE_SCHEDULED_TASKS) {
		Logger.info('enr_' + EmailNotification.status.OFF + '_' + new Date().getTime(),
			'scheduled tasks disabled on the server instance'
		)
		return 
	}

	const User = ioc.use('App/Models/User')
	const Mail = ioc.use('Mail')

	const EnvData = {
		APP_NAME: Env.get('APP_NAME'),
		APP_URL: Env.get('APP_URL')
	}

	// const MAIL_ACTIVE = JSON.parse(Env.get('MAIL_ACTIVE'));

	const job = new CronJob(
		'* * * * * *',
		async () => {
			try {
				await summaryPublications(User, EmailNotification, Logger, Mail, EnvData)
			} catch(error) {
				console.log('cron job error:', error.message)
				const errorReport = {
					error: 'cron job errord',
					error_message: error.message,
				}
				Logger.error(
					'enr_' + EmailNotification.status.CRITICAL_ERROR + '_' + new Date().getTime(),
					{ report: errorReport }
				)
			}
		}
	);

	job.start()

})
